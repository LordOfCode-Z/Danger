import socket
import requests
import threading
import dns.resolver

# Port Tarama Fonksiyonu
def scan_port(target, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            print(f"Port {port} is open")
        sock.close()
    except socket.error as e:
        print(f"Could not connect to {target}:{port} - {e}")

def port_scan(target, ports):
    print(f"Starting port scan on {target}")
    for port in ports:
        thread = threading.Thread(target=scan_port, args=(target, port))
        thread.start()

# Bot Yönetimi
class Bot:
    def __init__(self, name):
        self.name = name
    
    def send_message(self, message):
        print(f"{self.name} (Bot): {message}")
    
    def execute_command(self, command):
        print(f"{self.name} (Bot) executing: {command}")

def bot_management():
    bot = Bot("AlphaBot")
    bot.send_message("Hello, world!")
    bot.execute_command("gather_data")

# Stress Testing Fonksiyonu
def stress_test(target, duration):
    print(f"Starting stress test on {target} for {duration} seconds.")
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target, 80))
            sock.sendto(b"GET / HTTP/1.1\r\n", (target, 80))
            sock.close()
        except socket.error:
            continue
    print("Stress test completed.")

# Shield Bypass ve Gerçek IP Bulma
def dns_history_lookup(domain):
    try:
        resolver = dns.resolver.Resolver()
        resolver.nameservers = ['1.1.1.1', '1.0.0.1']  # Cloudflare DNS
        answers = resolver.query(domain, 'A')
        
        ip_addresses = []
        for rdata in answers:
            ip_addresses.append(rdata.address)
        
        return ip_addresses
    except Exception as e:
        print(f"DNS lookup error: {e}")
        return []

def check_shield(domain):
    print(f"Attempting shield bypass on: {domain}")
    ip_addresses = dns_history_lookup(domain)
    
    if ip_addresses:
        print("Real IP Addresses:")
        for ip in ip_addresses:
            print(f"- {ip}")
    else:
        print("No real IP found or shield bypass failed.")

# UUID Lookup Fonksiyonu
def uuid_lookup(player_name):
    url = f"https://api.mojang.com/users/profiles/minecraft/{player_name}"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if 'id' in data:
            print(f"UUID for {player_name}: {data['id']}")
            return data['id']
        else:
            print(f"Player {player_name} not found.")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Ana Menü ve Komut Yöneticisi
def main():
    print("Welcome to MCPenTool!")
    print("Type 'help' to see the list of commands.")
    
    while True:
        command = input("mcpentool> ")
        
        if command == "help":
            print("Commands:")
            print("- portscan <target> <ports>")
            print("- botmanage")
            print("- stresstest <target> <duration>")
            print("- checkshield <domain>")
            print("- uuidlookup <player_name>")
        
        elif command.startswith("portscan"):
            _, target, ports = command.split()
            ports = [int(p) for p in ports.split(',')]
            port_scan(target, ports)
        
        elif command == "botmanage":
            bot_management()
        
        elif command.startswith("stresstest"):
            _, target, duration = command.split()
            duration = int(duration)
            stress_test(target, duration)
        
        elif command.startswith("checkshield"):
            _, domain = command.split()
            check_shield(domain)
        
        elif command.startswith("uuidlookup"):
            _, player_name = command.split()
            uuid_lookup(player_name)
        
        elif command == "exit":
            print("Exiting MCPenTool.")
            break

        else:
            print("Unknown command. Type 'help' for a list of commands.")

# Programı Başlat
if __name__ == "__main__":
    main()